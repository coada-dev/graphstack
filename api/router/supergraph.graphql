schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/requiresScopes/v0.1", for: SECURITY)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @requiresScopes(scopes: [requiresScopes__Scope!]!) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

scalar join__FieldSet

enum join__Graph {
  FOO @join__graph(name: "foo", url: "https://foo.execute-api.localhost.localstack.cloud:4566/graphql")
  USERS @join__graph(name: "users", url: "https://user.execute-api.localhost.localstack.cloud:4566/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: USERS)
{
  createUser(id: ID, name: String): User
  updateUser(id: ID, name: String): User
}

type Query
  @join__type(graph: FOO)
  @join__type(graph: USERS)
{
  heyFoo(name: String): String @join__field(graph: FOO) @requiresScopes(scopes: [["development-default-resource-server/foo:bar"]])
  getUser(id: ID): User @join__field(graph: USERS)
  heyUser(name: String): String @join__field(graph: USERS)
}

scalar requiresScopes__Scope

type User
  @join__type(graph: USERS, key: "id")
{
  id: ID!
  name: String
}